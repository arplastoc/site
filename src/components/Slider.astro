---
import { Image } from 'astro:assets'
import type { ImageMetadata } from 'astro'

export type Props = {
	images: {
		image: ImageMetadata
		alt?: string
		title?: string
		author?: string
		other?: string
	}[]
	exitUrl: string
}

const { images, exitUrl } = Astro.props
---

<c-slider
	class="fixed inset-0 block overflow-hidden bg-primary-300"
	data-exit-url={exitUrl}
>
	<section class="flex">
		{
			images.map((el) => (
				<div class="flex h-svh w-screen shrink-0 flex-col items-end gap-4 p-4">
					<Image
						src={el.image}
						alt={el.alt ?? el.title ?? ''}
						class="h-full min-h-0 w-full min-w-0 grow object-contain"
						width={1200}
					/>
					{(el.author || el.title || el.other) && (
						<p class="max-w-[30ch] shrink-0 break-words px-4">
							{el.author && <span>{el.author}</span>}
							{el.title && <span class="italic">{el.title}</span>}
							{el.other && <span>{el.other}</span>}
						</p>
					)}
				</div>
			))
		}
	</section>
	<button
		data-js="prev-btn"
		class="absolute left-4 top-1/2 -translate-y-1/2 transition-opacity disabled:opacity-0"
	>
		<svg
			xmlns="http://www.w3.org/2000/svg"
			fill="none"
			viewBox="0 0 24 24"
			stroke-width="1.5"
			stroke="currentColor"
			class="size-6"
		>
			<path
				stroke-linecap="round"
				stroke-linejoin="round"
				d="M15.75 19.5 8.25 12l7.5-7.5"></path>
		</svg>
	</button>
	<button
		data-js="next-btn"
		class="absolute right-4 top-1/2 -translate-y-1/2 transition-opacity disabled:opacity-0"
	>
		<svg
			xmlns="http://www.w3.org/2000/svg"
			fill="none"
			viewBox="0 0 24 24"
			stroke-width="1.5"
			stroke="currentColor"
			class="size-6"
		>
			<path
				stroke-linecap="round"
				stroke-linejoin="round"
				d="m8.25 4.5 7.5 7.5-7.5 7.5"></path>
		</svg>
	</button>
	<a href={exitUrl} class="absolute right-4 top-4">
		<svg
			xmlns="http://www.w3.org/2000/svg"
			fill="none"
			viewBox="0 0 24 24"
			stroke-width="1.5"
			stroke="currentColor"
			class="size-8"
		>
			<path
				stroke-linecap="round"
				stroke-linejoin="round"
				d="M6 18 18 6M6 6l12 12"></path>
		</svg>
	</a>
</c-slider>

<script>
	import Embla, { type EmblaCarouselType } from 'embla-carousel'
	import { navigate } from 'astro:transitions/client'

	customElements.define(
		'c-slider',
		class Slider extends HTMLElement {
			#emblaApi: EmblaCarouselType
			#prevBtn: HTMLButtonElement | null
			#nextBtn: HTMLButtonElement | null
			constructor() {
				super()
				this.#emblaApi = Embla(this)
				this.#prevBtn = this.querySelector('button[data-js="prev-btn"')
				this.#nextBtn = this.querySelector('button[data-js="next-btn"')
			}
			connectedCallback() {
				this.#emblaApi
					.on('init', this.#handleInit)
					.on('reInit', this.#toggleBtns)
					.on('select', this.#handleChange)
				this.#prevBtn?.addEventListener('click', this.#handleClickPrev)
				this.#nextBtn?.addEventListener('click', this.#handleClickNext)
				document.addEventListener('keydown', this.#handleKeyDown)
			}

			disconnectedCallback() {
				this.#prevBtn?.removeEventListener('click', this.#handleClickPrev)
				this.#nextBtn?.removeEventListener('click', this.#handleClickNext)
				document.removeEventListener('keydown', this.#handleKeyDown)
			}

			#handleInit = () => {
				const [index] = location.hash.match(/\d+/) ?? []

				if (index) this.#emblaApi.scrollTo(Number(index), true)
				this.#toggleBtns()
			}

			#handleClickPrev = () => {
				this.#emblaApi.scrollPrev()
			}

			#handleClickNext = () => {
				this.#emblaApi.scrollNext()
			}

			#handleKeyDown = (e: KeyboardEvent) => {
				if (e.code === 'Escape' && typeof this.dataset.exitUrl === 'string')
					navigate(this.dataset.exitUrl)
				else if (e.code === 'ArrowRight') this.#emblaApi.scrollNext()
				else if (e.code === 'ArrowLeft') this.#emblaApi.scrollPrev()
			}

			#handleChange = () => {
				this.#toggleBtns()
				location.hash = `#${this.#emblaApi.selectedScrollSnap()}`
			}

			#toggleBtns = () => {
				this.#prevBtn?.toggleAttribute(
					'disabled',
					!this.#emblaApi.canScrollPrev()
				)
				this.#nextBtn?.toggleAttribute(
					'disabled',
					!this.#emblaApi.canScrollNext()
				)
			}
		}
	)
</script>

<style>
	p span:not(:last-child)::after {
		content: ', ';
	}
</style>
